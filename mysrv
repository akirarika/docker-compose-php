#!/bin/bash

SOURCE="$0"
while [ -h "$SOURCE"  ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd  )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /*  ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd  )"

cd $DIR

install (){
    chmod -R 777 ./*
    echo "mysrv installing..."
    echo " "
    cd /tmp
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    usermod -aG docker ${USER}
    systemctl enable docker
    systemctl start docker
    curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    echo " "
    echo "test your server:"
    docker -v && docker-compose -v
    ln -s $DIR/mysrv /usr/bin/mysrv
    echo "y" | ssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa
    
    cd $DIR
    cp env-example .env
    echo " "
    echo "mysrv installed. Your can: vim ${DIR}/.env"
}

init (){
    docker-compose up --detach --build --force-recreate workspace
}

open (){
    echo "[RUN] docker-compose exec $1 /bin/sh"
    docker-compose exec $1 /bin/sh
}

start(){
    echo "[RUN] docker-compose up --detach `cat .cntrLst`"
    docker-compose up --detach `cat .cntrLst`
}

stop(){
    echo "[RUN] docker-compose stop --timeout 42 `cat .cntrLst`"
    docker-compose stop --timeout 42 `cat .cntrLst`
}

restart(){
    echo "[RUN] docker-compose restart --timeout 42 `cat .cntrLst`"
    docker-compose restart --timeout 42 `cat .cntrLst`
}

delete(){
    read -p "[y/N]: " i
    if [ "$i" == "y" ]; then 
        docker stop $(docker ps -aq)
        docker-compose rm --force
    fi
}

gohome(){
    read -p "[y/N]: " i
    if [ "$i" == "y" ]; then 
        docker-compose stop
        docker-compose rm --force
        rm -rf ./mysql/data/*
        rm -rf ./mysql/logs/*
        rm -rf ./gogs/data/db/*
        rm -rf ./gogs/data/git/*
        rm -rf ./gogs/logs/*
        rm -rf ./caddy/logs/*
        rm -rf ./php/logs/*
        echo " " > ./mysql/data/.gitkeep
        echo " " > ./mysql/logs/.gitkeep
        echo " " > ./gogs/data/db/.gitkeep
        echo " " > ./gogs/data/git/.gitkeep
        echo " " > ./gogs/logs/.gitkeep
        echo " " > ./caddy/logs/.gitkeep
        echo " " > ./php/logs/.gitkeep
    fi
}

proj(){
    PROJDIR=$(cd "${DIR}/..";pwd)
    echo "Your project dir: $PROJDIR"
    cd $PROJDIR
}

dir(){
    echo "Mysrv dir: $DIR"
    cd $DIR
}

if [ ! -n "$1" ]; then 
    docker-compose up --detach workspace
    docker-compose exec workspace /bin/zsh
fi

$1 $2 $3
